
1. Scaling out (Adding or Removing consumer dynamically without bringing down the queue)

RabbitMQ nodes can be joined into clusters, and subsequently turned back into individual brokers
again. RabbitMQ brokers tolerate the failure of individual nodes. Nodes can be started and stopped
at will.

Note:

A RabbitMQ broker is a logical grouping of one or several Erlang nodes, each running the RabbitMQ
application and sharing users, virtual hosts, queues, exchanges, etc. Sometimes we refer to the
collection of nodes as a cluster.

All data/state required for the operation of a RabbitMQ broker is replicated across all nodes, for
reliability and scaling, with full ACID properties. An exception to this are message queues, which
by default reside on the node that created them, though they are visible and reachable from all
nodes. To replicate queues across nodes in a cluster, see the documentation on high availability.


2. Messages are delivered reliably (even if consumer dequeues and dies) When consumer dies
Connection fails, messages may be in transit between client and server - they may be in the middle
of being parsed or generated, in OS buffers, or on the wire. Messages in transit will be lost - they
will need to be retransmitted. Acknowledgements let the server and clients know when to do this.

Acknowledgements can be used in both directions - to allow a consumer to indicate to the server that
it has received / processed a message and to allow the server to indicate the same thing to the
producer. RabbitMQ refers to the latter case as a "confirm".

Use of acknowledgements guarantees at-least-once delivery. Without acknowledgements, message loss is
possible during publish and consume operations and only at-most-once delivery is guaranteed.

3. Batch operation should be supported
RabbitMQ supports batch operation using basic.qos and multiple flag on the acknowledgement

4. What is message size limit 
The size of the message is limited by the memory on the server. However its advisable to pass smaller messages to increase throughput.

5. OS required to run queue 
Supports Windows, Linux/Unix, Mac OS X, EC2. It also supports SSL

6. What happens when Disk get filled up 
Its a blocking queue meaning it will not accept any more messages from producers and block them.

Note 

Disk Alarm
	RabbitMQ will block producers when free disk space drops below a certain limit. This is a good idea since even transient messages can be paged to disk at any time, and running out of disk space can cause the server to crash. By default RabbitMQ will block producers, and prevent memory-based messages from being paged to disk, when free disk space drops below 50MB. This will reduce but not eliminate the likelihood of a crash due to disk space being exhausted. In particular, if messages are being paged out rapidly it is possible to run out of disk space and crash in the time between two runs of the disk space monitor
	When running RabbitMQ in a cluster, the disk alarm is cluster-wide; if one node goes under the limit then all nodes will block connections. By default it checks every 10 sec.

Memory Alarms
	The RabbitMQ server detects the total amount of RAM installed in the computer on startup and when rabbitmqctl set_vm_memory_high_watermark fraction is executed. By default, when the RabbitMQ server uses above 40% of the installed RAM, it raises a memory alarm and blocks all connections. Once the memory alarm has cleared (e.g. due to the server paging messages to disk or delivering them to clients) normal service resumes.
	The default memory threshold is set to 40% of installed RAM. Note that this does not prevent the RabbitMQ server from using more than 40%, it is merely the point at which publishers are throttled. Erlang's garbage collector can, in the worst case, cause double the amount of memory to be used (by default, 80% of RAM). It is strongly recommended that OS swap or page files are enabled.

Page out
	Before the broker hits the high watermark and blocks publishers, it will attempt to free up memory by instructing queues to page their contents out to disc. Both persistent and transient messages will be paged out (the persistent messages will already be on disc but will be evicted from memory).
    By default this starts to happen when the broker is 50% of the way to the high watermark (i.e. with a default high watermark of 0.4, this is when 20% of memory is used).

Flow Control
	RabbitMQ will reduce the speed of connections which are publishing too quickly for queues to keep up. No configuration is required. This means the connection is being blocked and unblocked several times per second, in order to keep the rate of message ingress at one that the rest of the server can handle. In general, a connection which is in flow control should not see any difference from normal running; the flow state is there to inform the sysadmin that the publishing rate is restricted, but from the client's perspective it should just look like the network bandwidth to the server is lower than it actually is
Finding bottlenecks here http://www.rabbitmq.com/blog/2014/04/14/finding-bottlenecks-with-rabbitmq-3-3/

7. Ordering does not matter (can that help bring performance?)
	Messages are always held in the queue in publication order.Messages can be returned to the queue using AMQP methods that feature a requeue
 parameter (basic.recover, basic.reject and basic.nack), or due to a channel 
 closing while holding unacknowledged messages...With release 2.7.0 and later 
 it is still possible for individual consumers to observe messages out of 
 order if the queue has multiple subscribers. This is due to the actions of 
 other subscribers who may requeue messages. From the perspective of the queue 
 the messages are always held in the publication order.
	 
8. What happens if consumers takes forever to complete given task ?

	Each consumer should extends TimerTask or use ExecutorsService with timeout and maintains it own time out. In good case it will send ack and queue will remove msg. In case of time out it will send nack and that msg will be passed on to other consumer.
	
 9. Where are messages persisted ? 
 	The messages are stored on the node on which the queue resides / was declared
 
 10. Expired msg if you can ? 
 
 11. Size of the queue (bounded or unbounded) 
 	Size of the queue can be bounded by number of messages or message body size
 
 12. Performance number ? 
 
 13. gotcha ?



Clustering Guide

A RabbitMQ broker is a logical grouping of one or several Erlang nodes, each running the RabbitMQ
application and sharing users, virtual hosts, queues, exchanges, etc. Sometimes we refer to the
collection of nodes as a cluster.

All data/state required for the operation of a RabbitMQ broker is replicated across all nodes, for
reliability and scaling, with full ACID properties. An exception to this are message queues, which
by default reside on the node that created them, though they are visible and reachable from all
nodes. To replicate queues across nodes in a cluster, see the documentation on high availability
(note that you will need a working cluster first).

RabbitMQ clustering does not tolerate network partitions well, so it should not be used over a WAN.
The shovel or federation plugins are better solutions for connecting brokers across a WAN.

The composition of a cluster can be altered dynamically. All RabbitMQ brokers start out as running
on a single node. These nodes can be joined into clusters, and subsequently turned back into
individual brokers again.

RabbitMQ brokers tolerate the failure of individual nodes. Nodes can be started and stopped at will.

A node can be a disk node or a RAM node. (Note: disk and disc are used interchangeably.
Configuration syntax or status messages normally use disc.) RAM nodes keep their state only in
memory (with the exception of queue contents, which can reside on disc if the queue is persistent or
too big to fit in memory). Disk nodes keep state in memory and on disk. As RAM nodes don't have to
write to disk as much as disk nodes, they can perform better. However, note that since the queue
data is always stored on disc, the performance improvements will affect only resources management
(e.g. adding/removing queues, exchanges, or vhosts), but not publishing or consuming speed. Because
state is replicated across all nodes in the cluster, it is sufficient (but not recommended) to have
just one disk node within a cluster, to store the state of the cluster safely.


RabbitMQ has inbuilt support for SSL

Supports Windows, Linux/Unix, Mac OS X, EC2

Official Client : Java, .net/C#, Erlang

Size of the queue bounded by number of messages or message body size

Batch operation using basic.qos and multiple flag on the acknowledgement

Queues may be located on a single node, or mirrored across multiple nodes. A client connecting to
any node in a cluster can see all queues in the cluster, even if they are not located on that node

Even if you called purged it will remove msg from the queue but not from consumer

Some time RabbitMQ goes into lala land in order to kill it find process running it. 
$: ps aux | grep epmd
$: ps aux | grep erl
kill -9 {Process_ID}
